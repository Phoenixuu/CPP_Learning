#include <iostream>
using namespace std;

int row,col, count;
int ma, hau, tot, totx, toty;

int board[1000][1000];

int dxhau[] = {-1,-1,-1, 0,0, 1,1,1};
int dyhau[] = {-1, 0, 1,-1,1,-1,0,1};

int dxma[] = {-2,-2,-1,-1, 1,1, 2,2};
int dyma[] = {-1, 1,-2, 2,-2,2,-1,1};

int vitri_hau[2][1000];
int vitri_ma[2][1000];

void nhap(){
	for(int i = 0; i < row; i++){
		for(int j = 0; j < col; j++){
			board[i][j] = 0;
		}
	}
	
	cin >> hau;
	if(hau > 0){
		for(int i = 0; i < hau; i++){
			cin >> vitri_hau[0][i] >> vitri_hau[1][i];
			board[vitri_hau[0][i] - 1][vitri_hau[1][i] - 1] = 1;
		}
	}
	
	cin >> ma;
	if(ma > 0){
		for(int i = 0; i < ma; i++){
			cin >> vitri_ma[0][i] >> vitri_ma[1][i];
			board[vitri_ma[0][i] -1][vitri_ma[1][i] - 1] = 2;
		}
	}
	
	cin >> tot;
	if(tot > 0){
		for(int i = 0; i < tot; i++){
			cin >> totx >> toty;
			board[totx - 1][toty - 1] = 3;
		}
	}
}

bool check(int x, int y){
	if(x < 0 || x >= row || y < 0 || y >= col){
		return false;
	} else{
		return true;
	}
}

void solve(){
	count = 0;
	for(int i = 0; i < hau; i++){
		for(int j = 0; j < 8; j++){
			int x = vitri_hau[0][i] - 1 + dxhau[j];
			int y = vitri_hau[1][i] - 1 + dyhau[j];
			while(check(x,y) && (board[x][y] == 0 || board[x][y] == -1)){
				board[x][y] = -1;
				x += dxhau[j];
				y += dyhau[j];
			}
		}
	}
	
	for(int i = 0; i < ma; i++){
		for(int j = 0; j < 8; j++){
			int x = vitri_ma[0][i] -1 + dxma[j];
			int y = vitri_ma[1][i] -1 + dyma[j];
			if(check(x,y) && (board[x][y] == 0 || board[x][y] == -1)){
				board[x][y] = -1;
			}
		}
	}
	
	for (int i = 0; i < row; i++){
		for(int j = 0; j < col; j++){
			if(board[i][j] == 0){
				count++;
			}
		}
	}
}


int main() {
	for(int t = 1;;t++){
		cin >> row >> col;
		if(row == 0 || col == 0){
			break;
		}
		nhap();
		solve();
		cout << "Board " << t << " has " << count << " safe squares. " << endl;
	}

	return 0;
}